{"version":3,"sources":["components/Api/Api.jsx","components/Button/Button.jsx","components/Container/Container .jsx","components/helpers/mapper.jsx","components/ImageGalleryItem/ImageGalleryItem.jsx","components/ImageGallery/ImageGallery.jsx","components/Modal/Modal.jsx","components/Searchbar/Searchbar.jsx","components/Spinner/Spinner.jsx","App.js","index.js"],"names":["axios","defaults","baseURL","fetchImg","a","query","perPage","currentPage","get","res","data","hits","propTypes","PropTypes","string","isRequired","number","Button","text","onLoadClick","className","type","onClick","Container","children","mapper","images","map","id","webformatURL","largeImageURL","tags","ImageGalleryItem","src","alt","largeImage","onImageClick","width","height","ImageGallery","modalRoot","document","querySelector","Modal","onClose","modalImage","useEffect","window","addEventListener","handleModalEscape","removeEventListener","e","keyCode","createPortal","target","currentTarget","Searchbar","onSubmit","useState","setQuery","preventDefault","autoComplete","autoFocus","value","placeholder","onChange","Spinner","color","App","setHits","setCurrentPage","modal","setModal","setModalImage","isLoading","setIsLoading","setError","imageApi","then","result","prevState","scrollTo","top","documentElement","scrollHeight","behavior","catch","error","finally","trim","length","prevPage","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.10c7cb37.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport PropTypes from 'prop-types';\r\n\r\naxios.defaults.baseURL = 'https://pixabay.com/api';\r\nconst apikey = '22318307-8fc961fa8d00a621cd6d86864';\r\n\r\nconst fetchImg = async ({ query, perPage = 9, currentPage = 1 }) => {\r\n    const res = await axios.get(\r\n        `/?image_type=photo&orientation=horizontal&q=${query}&per_page=${perPage}&key=${apikey}&page=${currentPage}`,\r\n    );\r\n    return res.data.hits;\r\n};\r\n\r\nfetchImg.propTypes = {\r\n    query: PropTypes.string.isRequired,\r\n    perPage: PropTypes.number.isRequired,\r\n    currentPage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default fetchImg;\r\n","import PropTypes from 'prop-types';\r\nimport './Button.scss';\r\n\r\nconst Button = ({ text, onLoadClick }) => {\r\n    return (\r\n        <button className=\"btnLoadMore\" type=\"button\" onClick={onLoadClick}>\r\n            {text}\r\n        </button>\r\n    );\r\n};\r\n\r\nButton.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    onLoadClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Button;\r\n","import PropTypes from 'prop-types';\r\nimport './Container.scss';\r\n\r\nconst Container = ({ children }) => {\r\n    return <div className=\"Container\">{children}</div>;\r\n};\r\n\r\nContainer.propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Container;\r\n","import PropTypes from 'prop-types';\r\n\r\nexport const mapper = images => {\r\n    return images.map(({ id, webformatURL, largeImageURL, tags }) => ({\r\n        id,\r\n        webformatURL,\r\n        largeImageURL,\r\n        tags,\r\n    }));\r\n};\r\n\r\nmapper.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    webformatURL: PropTypes.string.isRequired,\r\n    largeImageURL: PropTypes.string.isRequired,\r\n    tags: PropTypes.string.isRequired,\r\n};\r\n","import '../../styles.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ImageGalleryItem = ({ src, alt, largeImage, onImageClick }) => (\r\n    <img\r\n        src={src}\r\n        alt={alt}\r\n        width=\"300\"\r\n        height=\"300\"\r\n        onClick={() => onImageClick(largeImage)}\r\n        className=\"ImageGalleryItem-image\"\r\n    />\r\n);\r\n\r\nImageGalleryItem.propTypes = {\r\n    src: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired,\r\n    largeImage: PropTypes.string.isRequired,\r\n    onImageClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ImageGalleryItem;\r\n","import PropTypes from 'prop-types';\r\nimport ImageGalleryItem from '../ImageGalleryItem';\r\nimport '../../styles.css';\r\n\r\nconst ImageGallery = ({ hits, onImageClick }) => (\r\n    <ul className=\"ImageGallery\">\r\n        {hits.map(({ id, webformatURL, tags, largeImageURL }) => (\r\n            <li className=\"ImageGalleryItem\" key={id}>\r\n                <ImageGalleryItem\r\n                    src={webformatURL}\r\n                    alt={tags}\r\n                    largeImage={largeImageURL}\r\n                    onImageClick={onImageClick}\r\n                />\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nImageGallery.propTypes = {\r\n    hits: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.number.isRequired,\r\n            webformatURL: PropTypes.string.isRequired,\r\n            tags: PropTypes.string.isRequired,\r\n            largeImageURL: PropTypes.string.isRequired,\r\n        }).isRequired,\r\n    ),\r\n    onImageClick: PropTypes.func,\r\n};\r\n\r\nexport default ImageGallery;\r\n","import { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { createPortal } from 'react-dom';\r\nimport './Modal.scss';\r\n\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nexport default function Modal({ onClose, modalImage }) {\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', handleModalEscape);\r\n        return () => {\r\n            window.removeEventListener('keydown', handleModalEscape);\r\n        };\r\n    });\r\n\r\n    const handleModalEscape = e => {\r\n        if (e.keyCode === 27) onClose();\r\n    };\r\n\r\n    const handleBackdropClick = e => {\r\n        if (e.target === e.currentTarget) onClose();\r\n    };\r\n\r\n    return createPortal(\r\n        <div className=\"Overlay\" onClick={handleBackdropClick}>\r\n            <div className=\"Modal\">\r\n                <img src={modalImage} alt=\"\" />\r\n            </div>\r\n        </div>,\r\n        modalRoot,\r\n    );\r\n}\r\n\r\nModal.propTypes = {\r\n    onClose: PropTypes.func.isRequired,\r\n    modalImage: PropTypes.string.isRequired,\r\n};\r\n\r\n// export default class Modal extends Component {\r\n//     componentDidMount() {\r\n//         window.addEventListener('keydown', this.handleModalEscape);\r\n//     }\r\n\r\n//     handleModalEscape = e => {\r\n//         this.props.modalClose(e);\r\n//     };\r\n\r\n//     render() {\r\n//         return createPortal(\r\n//             <div className=\"Overlay\" onClick={this.props.handleBackdropClick}>\r\n//                 <div className=\"Modal\">{this.props.children}</div>\r\n//             </div>,\r\n//             modalRoot,\r\n//         );\r\n//     }\r\n\r\n//     static propTypes = {\r\n//         handleBackdropClick: PropTypes.func.isRequired,\r\n//         children: PropTypes.node,\r\n//     };\r\n// }\r\n","import PropTypes from 'prop-types';\r\nimport React, { useState } from 'react';\r\nimport '../../styles.css';\r\n\r\nexport default function Searchbar({ onSubmit }) {\r\n    const [query, setQuery] = useState('');\r\n\r\n    const handleChange = e => {\r\n        setQuery(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        onSubmit(query);\r\n        setQuery('');\r\n    };\r\n\r\n    return (\r\n        <header className=\"Searchbar\">\r\n            <form className=\"SearchForm\" onSubmit={handleSubmit}>\r\n                <button type=\"submit\" className=\"SearchForm-button\">\r\n                    <span className=\"SearchForm-button-label\">Search</span>\r\n                </button>\r\n\r\n                <input\r\n                    className=\"SearchForm-input\"\r\n                    type=\"text\"\r\n                    autoComplete=\"off\"\r\n                    autoFocus\r\n                    value={query}\r\n                    placeholder=\"Search images and photos\"\r\n                    onChange={handleChange}\r\n                />\r\n            </form>\r\n        </header>\r\n    );\r\n}\r\n\r\nSearchbar.propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\n// export default class Searchbar extends Component {\r\n//     state = {\r\n//         query: '',\r\n//     };\r\n\r\n//     handleChange = e => {\r\n//         this.setState({ query: e.target.value });\r\n//     };\r\n\r\n//     handleSubmit = e => {\r\n//         e.preventDefault();\r\n//         this.props.onSubmit(this.state.query);\r\n//         this.setState({ query: '' });\r\n//     };\r\n\r\n//     render() {\r\n//         return (\r\n//             <header className=\"Searchbar\">\r\n//                 <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\r\n//                     <button type=\"submit\" className=\"SearchForm-button\">\r\n//                         <span className=\"SearchForm-button-label\">Search</span>\r\n//                     </button>\r\n\r\n//                     <input\r\n//                         className=\"SearchForm-input\"\r\n//                         type=\"text\"\r\n//                         autoComplete=\"off\"\r\n//                         autoFocus\r\n//                         value={this.state.query}\r\n//                         placeholder=\"Search images and photos\"\r\n//                         onChange={this.handleChange}\r\n//                     />\r\n//                 </form>\r\n//             </header>\r\n//         );\r\n//     }\r\n//     static propTypes = {\r\n//         handleSubmit: PropTypes.func,\r\n//     };\r\n// }\r\n","import Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nconst Spinner = () => {\r\n    return <Loader type=\"ThreeDots\" color=\"#00BFFF\" height={80} width={80} />;\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useEffect, useState } from 'react';\r\nimport imageApi from './components/Api';\r\nimport Button from './components/Button';\r\nimport Container from './components/Container';\r\nimport { mapper } from './components/helpers/mapper';\r\nimport ImageGallery from './components/ImageGallery';\r\nimport Modal from './components/Modal';\r\nimport Searchbar from './components/Searchbar';\r\nimport Spinner from './components/Spinner';\r\n\r\nexport default function App() {\r\n    const [query, setQuery] = useState('');\r\n    const [hits, setHits] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [modal, setModal] = useState(false);\r\n    const [modalImage, setModalImage] = useState({});\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const handleInputChange = query => {\r\n        setQuery(query.trim());\r\n        setCurrentPage(1);\r\n        setHits([]);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchImg();\r\n    }, [query, currentPage]);\r\n\r\n    const fetchImg = () => {\r\n        if (!query) return;\r\n\r\n        setIsLoading(true);\r\n\r\n        imageApi({ query, currentPage })\r\n            .then(result => {\r\n                setHits(prevState => [...prevState, ...mapper(result)]);\r\n\r\n                window.scrollTo({\r\n                    top: document.documentElement.scrollHeight,\r\n                    behavior: 'smooth',\r\n                });\r\n            })\r\n            .catch(error => setError(error))\r\n            .finally(() => {\r\n                setIsLoading(false);\r\n            });\r\n    };\r\n\r\n    const loadMore = () => {\r\n        setCurrentPage(prevPage => prevPage + 1);\r\n    };\r\n\r\n    const handleModalOpen = largeImage => {\r\n        setModal(true);\r\n        setModalImage(largeImage);\r\n    };\r\n\r\n    const resetModal = () => {\r\n        setModal(false);\r\n        setModalImage('');\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <Searchbar onSubmit={handleInputChange} />\r\n\r\n            {query && (\r\n                <ImageGallery hits={hits} onImageClick={handleModalOpen} />\r\n            )}\r\n\r\n            {isLoading && <Spinner />}\r\n\r\n            {hits.length > 0 && (\r\n                <Button onLoadClick={loadMore} text=\"Load more\" />\r\n            )}\r\n\r\n            {modal && <Modal onClose={resetModal} modalImage={modalImage} />}\r\n        </Container>\r\n    );\r\n}\r\n\r\n// export default class App extends Component {\r\n//     state = {\r\n//         query: '',\r\n//         hits: [],\r\n//         currentPage: 1,\r\n//         modal: false,\r\n//         modalImage: '',\r\n//         isLoading: false,\r\n//         error: null,\r\n//     };\r\n\r\n//     componentDidUpdate(prevProps, prevState) {\r\n//         const { currentPage, query } = this.state;\r\n\r\n//         if (prevState.query !== query) {\r\n//             this.fetchImg();\r\n//         }\r\n//         if (prevState.currentPage !== currentPage) {\r\n//             this.fetchImg(currentPage);\r\n//         }\r\n//     }\r\n\r\n//     handleInputChange = data => {\r\n//         this.setState({ query: data.trim(), currentPage: 1, hits: [] });\r\n//     };\r\n\r\n//     fetchImg = () => {\r\n//         const { query, currentPage } = this.state;\r\n//         const option = { query, currentPage };\r\n//         if (!query) return;\r\n\r\n//         this.setState({ isLoading: true });\r\n\r\n//         imageApi(option)\r\n//             .then(result => {\r\n//                 this.setState(prevState => ({\r\n//                     hits: [...prevState.hits, ...mapper(result)],\r\n//                 }));\r\n\r\n//                 window.scrollTo({\r\n//                     top: document.documentElement.scrollHeight,\r\n//                     behavior: 'smooth',\r\n//                 });\r\n//             })\r\n//             .catch(error => this.setState({ error }))\r\n//             .finally(() => {\r\n//                 this.setState({ isLoading: false });\r\n//             });\r\n//     };\r\n\r\n//     loadMore = () => {\r\n//         let { currentPage } = this.state;\r\n//         currentPage += 1;\r\n//         this.setState({ currentPage });\r\n//     };\r\n\r\n//     handleModalOpen = largeImage => {\r\n//         this.setState({ modal: true, modalImage: largeImage });\r\n//     };\r\n\r\n//     handleModalEscape = e => {\r\n//         if (e.keyCode === 27) this.resetModal();\r\n//     };\r\n\r\n//     handleBackdropClick = e => {\r\n//         if (e.target === e.currentTarget) this.resetModal();\r\n//     };\r\n\r\n//     resetModal = () => {\r\n//         this.setState({ modal: false, modalImage: '' });\r\n//         window.removeEventListener('keydown', this.handleModalEscape);\r\n//     };\r\n\r\n//     render() {\r\n//         const { hits, query, modal, modalImage, isLoading } = this.state;\r\n//         const {\r\n//             handleInputChange,\r\n//             handleModalOpen,\r\n//             handleModalEscape,\r\n//             handleBackdropClick,\r\n//             loadMore,\r\n//         } = this;\r\n\r\n//         return (\r\n//             <Container>\r\n//                 <Searchbar onSubmit={handleInputChange} />\r\n//                 {query && (\r\n//                     <ImageGallery hits={hits} onImageClick={handleModalOpen} />\r\n//                 )}\r\n\r\n//                 {isLoading && <Spinner />}\r\n\r\n//                 {hits.length > 0 && (\r\n//                     <Button onLoadClick={loadMore} text=\"Load more\" />\r\n//                 )}\r\n\r\n//                 {modal && (\r\n//                     <Modal\r\n//                         modalClose={handleModalEscape}\r\n//                         handleBackdropClick={handleBackdropClick}\r\n//                     >\r\n//                         <img src={modalImage} alt=\"\" />\r\n//                     </Modal>\r\n//                 )}\r\n//             </Container>\r\n//         );\r\n//     }\r\n// }\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles.css';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}